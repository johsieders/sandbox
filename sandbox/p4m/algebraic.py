from __future__ import annotations
from typing import Protocol, runtime_checkable, Any

# ---------- Comparable Protocol ----------
@runtime_checkable
class Comparable(Protocol):
    def __eq__(self, other: Any) -> bool: ...
    def __lt__(self, other: Any) -> bool: ...

# ---------- Ring Protocol ----------
@runtime_checkable
class Ring(Protocol):
    def __add__(self, other: Any) -> Any: ...
    def __sub__(self, other: Any) -> Any: ...
    def __mul__(self, other: Any) -> Any: ...
    def __neg__(self) -> Any: ...
    def __eq__(self, other: Any) -> bool: ...
    @classmethod
    def zero(cls) -> Any: ...
    @classmethod
    def one(cls) -> Any: ...
    def norm(self) -> float: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...

# ---------- EuclideanRing Protocol ----------
@runtime_checkable
class EuclideanRing(Ring, Protocol):
    def __floordiv__(self, other: Any) -> Any: ...
    def __mod__(self, other: Any) -> Any: ...
    def divmod(self, other: Any) -> tuple[Any, Any]: ...
    def degree(self) -> int: ...
    def gcd(self, other: Any) -> Any: ...

# ---------- Field Protocol ----------
@runtime_checkable
class Field(EuclideanRing, Protocol):
    def __truediv__(self, other: Any) -> Any: ...
    def inverse(self) -> Any: ...
