# generated by GPT 4.1, 21.06.2025
# project Owner: Johannes Siedersleben
#
# Test driver for Stepfun: correctness and performance tests for sum and multiply.
# Uses pytest and pytest-benchmark (install with pip install pytest-benchmark).
# Includes tests for one, three, and four functions for both sum and multiply.
# Explanations are included as comments.

import random

import pytest

from sandbox.stepfunctions.stepfun import NumericStepfun as Stepfun


def tv(*pairs):
    # Helper to create tuple of (timestamp, value) pairs
    return tuple(pairs)


def make_random_stepfun(n_intervals, max_timestamp=100, min_value=1, max_value=10, seed=None):
    # Generate a Stepfun with n_intervals, random strictly increasing timestamps, and random values
    if seed is not None:
        random.seed(seed)
    stamps = sorted(random.sample(range(1, max_timestamp), n_intervals - 1))
    stamps = [0] + stamps
    values = [random.randint(min_value, max_value) for _ in range(n_intervals)]
    return Stepfun(tuple(zip(stamps, values)))


def test_sum_one_function():
    f = Stepfun(tv((0, 2), (5, 3)))
    s = Stepfun.sum(f)
    assert s == f


def test_sum_three_functions():
    f1 = Stepfun(tv((0, 2), (3, 4)))
    f2 = Stepfun(tv((0, 5), (2, 1)))
    f3 = Stepfun(tv((0, 1), (4, 2)))
    s = Stepfun.sum(f1, f2, f3)
    # [0,1): 2+5+1=8
    assert s(0.5) == 8
    # [2,3): 2+1+1=4
    assert s(2.5) == 4
    # [4,5): 4+1+2=7
    assert s(4.5) == 7


def test_sum_four_functions():
    f1 = Stepfun(tv((0, 1), (4, 3)))
    f2 = Stepfun(tv((0, 2), (3, 4)))
    f3 = Stepfun(tv((0, 5), (1, 1)))
    f4 = Stepfun(tv((0, 2), (4, 2)))
    s = Stepfun.sum(f1, f2, f3, f4)
    # [0,1): 1+2+5+2=10
    assert s(0.5) == 10
    # [3,4): 1+4+1+2=8
    assert s(3.5) == 8
    # [4,∞): 3+4+1+2=14
    assert s(5) == 10


def test_multiply_one_function():
    f = Stepfun(tv((0, 2), (5, 3)))
    m = Stepfun.multiply(f)
    assert m == f


def test_multiply_three_functions():
    f1 = Stepfun(tv((0, 2), (3, 4)))
    f2 = Stepfun(tv((0, 5), (2, 1)))
    f3 = Stepfun(tv((0, 1), (4, 2)))
    m = Stepfun.multiply(f1, f2, f3)
    # [0,1): 2*5*1=10
    assert m(0.5) == 10
    # [2,3): 2*1*1=2
    assert m(2.5) == 2
    # [4,5): 4*1*2=8
    assert m(4.5) == 8


def test_multiply_four_functions():
    f1 = Stepfun(tv((0, 1), (4, 3)))
    f2 = Stepfun(tv((0, 2), (3, 4)))
    f3 = Stepfun(tv((0, 5), (1, 1)))
    f4 = Stepfun(tv((0, 2), (4, 2)))
    m = Stepfun.multiply(f1, f2, f3, f4)
    # [0,1): 1*2*5*2=20
    assert m(0.5) == 20
    # [3,4): 1*4*5*2=40
    assert m(3.5) == 8
    # [4,∞): 3*4*1*2=24
    assert m(5) == 24


def test_sum_with_non_numerics():
    f1 = Stepfun(tv((0, 2), (3, "x")))
    f2 = Stepfun(tv((0, 5), (2, 4)))
    s = Stepfun.sum(f1, f2)
    # [0,2): 2+5=7
    assert s(1) == 7
    # [3,∞): "x" (non-numeric propagates)
    assert s(3.5) == "x"


def test_multiply_with_non_numerics():
    f1 = Stepfun(tv((0, 2), (3, "err")))
    f2 = Stepfun(tv((0, 5), (2, 4)))
    m = Stepfun.multiply(f1, f2)
    # [3,∞): "err"
    assert m(4) == "err"


@pytest.mark.benchmark(group="stepfun_sum")
def test_sum_performance_benchmark(benchmark):
    n_funcs = 100
    n_intervals = 50
    stepfuns = [make_random_stepfun(n_intervals, max_timestamp=1000, min_value=1, max_value=10, seed=i)
                for i in range(n_funcs)]

    def do_sum():
        Stepfun.sum(*stepfuns)

    result = benchmark(do_sum)
    # The benchmark assertion is handled by pytest-benchmark


@pytest.mark.benchmark(group="stepfun_multiply")
def test_multiply_performance_benchmark(benchmark):
    n_funcs = 100
    n_intervals = 50
    stepfuns = [make_random_stepfun(n_intervals, max_timestamp=1000, min_value=1, max_value=2, seed=i + 100)
                for i in range(n_funcs)]

    def do_multiply():
        Stepfun.multiply(*stepfuns)

    result = benchmark(do_multiply)
    # The benchmark assertion is handled by pytest-benchmark
