# generated by GPT 4.1, 22.06.2025
# project Owner: Johannes Siedersleben
#
# Test driver for the new features of Stepfun supporting the real line.
# Tests: evaluation left of first breakpoint, automatic insertion of initial value,
# "-oo" and None as timestamp, non-numeric left intervals, and binary ops on extended domain.
# Pytest compatible.


from sandbox.stepfunctions.stepfun import NumericStepfun as Stepfun


def test_evaluate_left_of_first_break():
    f = Stepfun([(None, 100), (10, 200)])
    assert f(-5) == 100
    assert f(0) == 100
    assert f(9.99) == 100
    assert f(10) == 200
    assert f(50) == 200


def test_evaluate_with_minus_infinity_string():
    g = Stepfun([("-oo", 0), (0, 1), (5, 2)])
    assert g(-1000) == 0
    assert g(-1) == 0
    assert g(0) == 1
    assert g(3) == 1
    assert g(5) == 2
    assert g(6) == 2


def test_automatic_initial_value_insertion():
    h = Stepfun([(2, 99), (5, 100)])
    assert h(-10) == 99
    assert h(0) == 99
    assert h(2) == 99
    assert h(4.9) == 99
    assert h(5) == 100


def test_non_numeric_left_value():
    f = Stepfun([(None, "blank"), (0, 2), (1, 3)])
    assert f(-100) == "blank"
    assert f(-0.1) == "blank"
    assert f(0) == 2
    assert f(0.99) == 2
    assert f(1) == 3


def test_left_value_propagation_in_sum():
    f = Stepfun([(None, 10), (2, 20)])
    g = Stepfun([(None, 1), (1, 2), (3, 3)])
    s = f + g
    # [-inf,1): 10+1=11, [1,2): 10+2=12, [2,3): 20+2=22, [3,∞): 20+3=23
    assert s(-5) == 11
    assert s(0.5) == 11
    assert s(1) == 12
    assert s(2.5) == 22
    assert s(5) == 23


def test_left_value_propagation_with_non_numeric():
    f = Stepfun([(None, "a"), (2, 10)])
    g = Stepfun([(None, 1), (2, "b")])
    s = f + g
    assert s(-1000) == "a"
    assert s(0) == "a"
    assert s(2) == "b"
    assert s(100) == "b"


def test_left_value_binary_ops():
    f = Stepfun([(None, 10), (2, 20)])
    g = Stepfun([(None, 2), (2, 4)])
    assert (f - g)(-5) == 8
    assert (f / g)(-5) == 5
    assert (f - g)(3) == 16
    assert (f / g)(3) == 5


def test_compare_left_values():
    f = Stepfun([(None, 1), (0, 5)])
    g = Stepfun([(None, 0), (0, 5)])
    assert (f >= g)
    assert not (f < g)
    h = Stepfun([(None, 1), (0, 4)])
    assert (f >= h)
    assert not (f < h)
    # Test with non-numeric
    n = Stepfun([(None, "a"), (0, 1)])
    m = Stepfun([(None, 0), (0, 1)])
    assert not (n > m)
    assert not (n < m)


def test_integration_over_leftmost_interval():
    f = Stepfun([(None, 3), (2, 5)])
    # Integrate from -2 to 2: [(-2,2) @ 3] = 4*3 = 12
    assert f.integrate(-2, 2) == 12
    # Integrate from -2 to 5: [(-2,2) @ 3] + [(2,5) @ 5] = 12 + 3*5 = 27
    assert f.integrate(-2, 5) == 27


def test_integration_with_minus_infinity_string():
    f = Stepfun([("-oo", 1), (0, 2), (3, 0)])
    # Integrate from -10 to 0: [(-10,0) @ 1] = 10
    assert f.integrate(-10, 0) == 10
    # Integrate from -1 to 3: [(-1,0) @ 1]=1, [(0,3) @ 2]=6; total=7
    assert f.integrate(-1, 3) == 7
